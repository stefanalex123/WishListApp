// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id            String        @id @default(uuid())
  username      String        @unique() 
  password      String     
  userItems     Items[]       @relation("useritems")
  userWishlists Wishlist[]    @relation("userwishlists")
  userProfile   UserProfile[] @relation ("userprofile")
  userAdresses  Adress[]      @relation ("useradresses")
  itemBoughtByUsers BuyItem[] @relation ("itemsboughtbyuser")
  itemsBoughtByUserWithContribution ContributionInvitation[]    @relation ("itemsboughtbyuserwithcontribution")
  usersAskedForContribution         ContributionInvitation[]    @relation ("usersaskedforcontribution")
  notifications                     Notifications[]             @relation("notificantions")
  referralsInvitations              mailsReferralsInvitations[] @relation("referralsinvitations")
  @@map("users")
}

model UserProfile{
userId           String @id
user             User     @relation("userprofile", fields: [userId], references: [id], onDelete: Cascade)
email            String
nickname         String   @unique
phoneNumber      String
mailsNotifications String
socketId            String
user_group_invitation GroupInvitations[] @relation ("usergroupinvitation")
}

model Items {
id                 String   @id @default(uuid())
userId          String 
user              User    @relation("useritems", fields: [userId], references: [id], onDelete: Cascade)
itemName           String 
itemLink           String
itemDescription    String
status             String  @default ("DISPONIBLE")
wishlists          ItemToWishlist[]      @relation ("wishlists")
itemBoughtBy       BuyItem[]             @relation ("itemboughtby")
itemBoughtByItemBoughtByCountribution     ContributionInvitation[]            @relation ("itemboughtbycountribution")
  @@map ("items")
}

model Adress {
id          String   @id @default(uuid())
userId      String 
user        User     @relation("useradresses", fields: [userId], references: [id], onDelete: Cascade)
country     String 
city        String
street      String
flat        String
postalCode  String
   @@map ("adress")
}

model Wishlist{
id                     String   @id @default(uuid())
userId                 String 
user                   User     @relation("userwishlists", fields: [userId], references: [id], onDelete: Cascade)
wishlistName           String 
wishlistDescription    String
status                 String @default("Unavailable, add at least one item to it")
wishlistNrItems        Int @default(0)
createdAt              DateTime @default(now())
updatedAt              DateTime @default(now())
wishlistItems          ItemToWishlist[]      @relation ("wishlistitems")
wishlistGroups         WishlistToGroup[]     @relation ("wishlistgroups")
  @@map ("wishlist")
}

model ItemToWishlist {
id            String   @id @default(uuid())
wishlistId    String
wishlist      Wishlist     @relation("wishlistitems", fields: [wishlistId], references: [id], onDelete: Cascade)
itemId        String
items         Items    @relation("wishlists", fields: [itemId], references: [id], onDelete: Cascade)
createdAt     DateTime @default(now())
updatedAt     DateTime @default(now())
@@map ("itemtowishlist")
}

model Group {
id                String   @id @default(uuid())
groupTitle        String
groupDescription  String
groupOwnerId      String
groupWishlists    WishlistToGroup[]     @relation ("groupswihslists")
invitations_to_this_group  GroupInvitations[] @relation ("invitationtothisgroup")
referralsInvitations  mailsReferralsInvitations[]   @relation("referralsinvitations2")
@@map ("group")
}

model WishlistToGroup {
id            String   @id @default(uuid())
wishlistId    String
wishlist      Wishlist     @relation("wishlistgroups", fields: [wishlistId], references: [id], onDelete: Cascade)
groupId       String
group         Group   @relation("groupswihslists", fields: [groupId], references: [id], onDelete: Cascade)    
createdAt     DateTime @default(now())
updatedAt     DateTime @default(now())
  @@map ("wishlisttogroup")
}

model GroupInvitations {
id            String   @id @default(uuid())
status        String    
groupId       String
group         Group     @relation ("invitationtothisgroup", fields: [groupId], references: [id], onDelete: Cascade) 
userInvitedId String
userProfile          UserProfile      @relation ("usergroupinvitation", fields: [userInvitedId], references: [userId], onDelete: Cascade) 
}

model BuyItem{
id            String   @id @default(uuid())
itemId        String    
item          Items     @relation("itemboughtby", fields: [itemId], references: [id], onDelete: Cascade)
userBuyerId   String
user          User      @relation ("itemsboughtbyuser",  fields: [userBuyerId], references: [id], onDelete: Cascade)
userStatus    String
}

model ContributionInvitation{
id                 String   @id @default(uuid())
itemId             String    
item               Items     @relation("itemboughtbycountribution", fields: [itemId], references: [id], onDelete: Cascade)
userContributerId  String
user               User      @relation ("itemsboughtbyuserwithcontribution",  fields: [userContributerId], references: [id], onDelete: Cascade)
status             String
userAskedId        String
usersAskedForContribution          User      @relation ("usersaskedforcontribution",  fields: [userAskedId], references: [id], onDelete: Cascade)
}

model Notifications {
id                        String   @id @default(uuid())
notificationDescription   String
deliverAt                 DateTime @default(now())
userdeliverId             String  
user                      User      @relation ("notificantions",  fields: [userdeliverId], references: [id], onDelete: Cascade)
 
}


model mailsReferralsInvitations{
id             String   @id @default(uuid())
userDeliverId  String
user           User                 @relation ("referralsinvitations",  fields: [userDeliverId], references: [id], onDelete: Cascade)        
groupId        String
group          Group                @relation ("referralsinvitations2",  fields: [groupId], references: [id], onDelete: Cascade)        
emailSend          String
status              String
}

































