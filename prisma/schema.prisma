// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}




model User {
  id            String   @id @default(uuid())
  username      String    @unique() 
  password      String       @default ("root")
  useritems     Items[]      @relation("useritems")
  userwishlists Wishlist[]    @relation("userwishlists")
  userprofile   UserProfile[] @relation ("userprofile")
  useradresses  Adress[]      @relation ("useradresses")
  user_group_invitation GroupInvitations[] @relation ("usergroupinvitation")

  @@map("users")
}

model UserProfile{
userid           String @id
user             User     @relation("userprofile", fields: [userid], references: [id], onDelete: Cascade)
email            String
nickname         String   @unique
phonenumber      String
}

model Items {
id            String   @id @default(uuid())
userid           String 
user        User     @relation("useritems", fields: [userid], references: [id], onDelete: Cascade)
itemname           String 
itemlink           String
itemdescription    String
wishlists          Itemtowishlist[]      @relation ("wishlists")
  @@map ("items")
}

model Adress {
id          String   @id @default(uuid())
userid      String 
user        User     @relation("useradresses", fields: [userid], references: [id], onDelete: Cascade)
country     String 
city    String
street      String
flat        String
postalcode  String
  @@map ("adress")
}

model Wishlist{
id            String   @id @default(uuid())
userid           String 
user        User     @relation("userwishlists", fields: [userid], references: [id], onDelete: Cascade)
wishlistname           String 
wishlistdescription    String
status                 String @default("Processing, you need to add at least one item to make it vizible for other users")
createdAt     DateTime @default(now())
updatedAt     DateTime @default(now())
wishlistitems          Itemtowishlist[]      @relation ("wishlistitems")
wishlistgroups         Wishlisttogroup[]     @relation ("wishlistgroups")
  @@map ("wishlist")
}


model Itemtowishlist {
id            String   @id @default(uuid())
wishlistid    String
wishlist        Wishlist     @relation("wishlistitems", fields: [wishlistid], references: [id], onDelete: Cascade)
itemid        String
items           Items    @relation("wishlists", fields: [itemid], references: [id], onDelete: Cascade)
createdAt     DateTime @default(now())
updatedAt     DateTime @default(now())

  @@map ("itemtowishlist")
}


model Group {
id            String   @id @default(uuid())
grouptitle        String
groupdescription  String
groupownerid      String
groupwishlists    Wishlisttogroup[]     @relation ("groupswihslists")
invitations_to_this_group  GroupInvitations[] @relation ("invitationtothisgroup")

@@map ("group")
}

model Wishlisttogroup {
id            String   @id @default(uuid())
wishlistid    String
wishlist        Wishlist     @relation("wishlistgroups", fields: [wishlistid], references: [id], onDelete: Cascade)
groupid       String
group         Group   @relation("groupswihslists", fields: [groupid], references: [id], onDelete: Cascade)    
createdAt     DateTime @default(now())
updatedAt     DateTime @default(now())

  @@map ("wishlisttogroup")
}

model GroupInvitations {
id            String   @id @default(uuid())
status        String    
groupid       String
group         Group     @relation ("invitationtothisgroup", fields: [groupid], references: [id], onDelete: Cascade) 
userinvitedId String
user          User      @relation ("usergroupinvitation", fields: [userinvitedId], references: [id], onDelete: Cascade) 

}
























